# -*- coding: utf-8 -*-
"""Transfer_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bykmmSKUxIHU23yhZg6856DUiSXHaZol
"""

import numpy as np
import cv2

import PIL.Image as Image
import os

import matplotlib.pylab as plt

import tensorflow as tf
import tensorflow_hub as hub

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras import Model
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.losses import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from zipfile import ZipFile

from google.colab import drive
drive.mount('/content/drive')

## Mark train
with ZipFile('/content/drive/MyDrive/small_folder.zip') as zipObj:
  zipObj.extractall('/sample/small_folder/')

with ZipFile('/content/drive/MyDrive/test.zip') as zipObj1:
  zipObj1.extractall('/test')

## Mark train
training_dataset_path = "/sample/small_folder/small_folder"
test_dataset_path = "/test/test"

EPOCHS = 30
BATCH_SIZE = 32
image_height = 227
image_width = 227
train_dir = "/sample/small_folder/small_folder"
valid_dir = "/test/test"

train_datagen = ImageDataGenerator(
                  rescale=1./255,
                  rotation_range=10,
                  width_shift_range=0.1,
                  height_shift_range=0.1,
                  shear_range=0.1,
                  zoom_range=0.1)

train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(image_height, image_width),
                                                    color_mode="rgb",
                                                    batch_size=BATCH_SIZE,
                                                    seed=1,
                                                    shuffle=True,
                                                    class_mode="categorical")

valid_datagen = ImageDataGenerator(rescale=1.0/255.0)
valid_generator = valid_datagen.flow_from_directory(valid_dir,
                                                    target_size=(image_height, image_width),
                                                    color_mode="rgb",
                                                    batch_size=BATCH_SIZE,
                                                    seed=7,
                                                    shuffle=True,
                                                    class_mode="categorical"
                                                    )
train_num = train_generator.samples
valid_num = valid_generator.samples

"""#ResNet50"""

feature_extractor_model = "https://tfhub.dev/google/imagenet/resnet_v2_50/classification/5"
pre_trained_model = hub.KerasLayer(feature_extractor_model, input_shape=(224,224,3),trainable=False)

num_of_classes = 5
model = tf.keras.Sequential([pre_trained_model,tf.keras.layers.Dense(num_of_classes)])
model.summary()

model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

model.fit(train_generator, epochs=5)

model.evaluate(valid_generator)

"""#InceptionV3"""

feature_extractor_model = "https://tfhub.dev/google/imagenet/inception_v3/classification/5"
pre_trained_model = hub.KerasLayer(feature_extractor_model, input_shape=(224,224,3),trainable=False)
num_of_classes = 5
model1 = tf.keras.Sequential([pre_trained_model,tf.keras.layers.Dense(num_of_classes)])
print(model1.summary())
model1.compile(optimizer="adam", loss='categorical_crossentropy', metrics=["accuracy"])
model1.fit(train_generator, epochs=5)

model1.evaluate(valid_generator)

from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
import numpy as np

model_res = ResNet50(input_shape= [224,224,3],weights='imagenet', include_top=False)

for layer in model_res.layers:
  layer.trainable=False

x = Flatten()(model_res.output)
prediction = Dense(5, activation='softmax')(x)
model2 = Model(inputs=model_res.input, outputs=prediction)
model2.summary()

model2.compile(optimizer="adam", loss='categorical_crossentropy', metrics=["accuracy"])
model2.fit(train_generator,epochs=5)

