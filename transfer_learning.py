# -*- coding: utf-8 -*-
"""Transfer_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bykmmSKUxIHU23yhZg6856DUiSXHaZol
"""

import numpy as np
import cv2

import PIL.Image as Image
import os

import matplotlib.pylab as plt

import tensorflow as tf
import tensorflow_hub as hub

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras import Model
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.losses import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from zipfile import ZipFile

from google.colab import drive
drive.mount('/content/drive')

## Mark train
with ZipFile('/content/drive/MyDrive/pizza_classified_test_train.zip') as zipObj:
  zipObj.extractall('/sample/pizza_classified_test_train/')

EPOCHS = 30
BATCH_SIZE = 32
image_height = 224
image_width = 224
train_dir = "/sample/pizza_classified_test_train/final folder/train"
valid_dir = "/sample/pizza_classified_test_train/final folder/test"

train_datagen = ImageDataGenerator(
                  rescale=1./255,
                  rotation_range=10,
                  width_shift_range=0.1,
                  height_shift_range=0.1,
                  shear_range=0.1,
                  zoom_range=0.1)

train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(image_height, image_width),
                                                    color_mode="rgb",
                                                    batch_size=BATCH_SIZE,
                                                    seed=1,
                                                    shuffle=True,
                                                    class_mode="categorical")

valid_datagen = ImageDataGenerator(rescale=1.0/255.0)
valid_generator = valid_datagen.flow_from_directory(valid_dir,
                                                    target_size=(image_height, image_width),
                                                    color_mode="rgb",
                                                    batch_size=BATCH_SIZE,
                                                    seed=7,
                                                    shuffle=True,
                                                    class_mode="categorical"
                                                    )
train_num = train_generator.samples
valid_num = valid_generator.samples

def plot_accuracy(hist):
  plt.plot(hist.history["accuracy"])
  plt.plot(hist.history["val_accuracy"])
  plt.title("Model accuracy")
  plt.ylabel("accuracy")
  plt.xlabel("epoch")
  plt.legend(["train", "validation"], loc="upper left")
  plt.show()
 
def plot_loss(hist):
  plt.plot(hist.history["loss"])
  plt.plot(hist.history["val_loss"])
  plt.title("Model loss")
  plt.ylabel("loss")
  plt.xlabel("epoch")
  plt.legend(["train", "validation"], loc="upper left")
  plt.show()

"""#ResNet50"""

feature_extractor_model = "https://tfhub.dev/google/imagenet/resnet_v2_50/classification/5"
pre_trained_resnet_model = hub.KerasLayer(feature_extractor_model, input_shape=(224,224,3),trainable=False)

num_of_classes = 2
resNet = tf.keras.Sequential([pre_trained_resnet_model,
                             tf.keras.layers.Dense(1001),
                             tf.keras.layers.Dropout(0.1),
                             tf.keras.layers.Dense(16),
                             tf.keras.layers.Dense(num_of_classes)])
resNet.summary()

resNet.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss="categorical_crossentropy", metrics=["accuracy"])

resNet.optimizer.learning_rate

resnet = resNet.fit(train_generator, validation_data  = valid_generator, epochs=10, verbose=2)

plot_accuracy(resnet)

plot_loss(resnet)

resNet.evaluate(valid_generator)

"""#InceptionV3"""

feature_extractor_model = "https://tfhub.dev/google/imagenet/inception_v3/classification/5"
pre_trained_inception_model = hub.KerasLayer(feature_extractor_model, input_shape=(224,224,3),trainable=False)
num_of_classes = 2
inception_v3 = tf.keras.Sequential([pre_trained_inception_model,      
                              tf.keras.layers.Dense(64),
                              tf.keras.layers.Dropout(0.1),
                              tf.keras.layers.Dense(16),
                              tf.keras.layers.Dense(num_of_classes)])
inception_v3.summary()

inception_v3.compile(optimizer="adam", loss='categorical_crossentropy', metrics=["accuracy"])

inception = inception_v3.fit(train_generator,  validation_data  = valid_generator, epochs=5, verbose=2)

plot_accuracy(inception)

plot_loss(inception)

inception_v3.evaluate(valid_generator)